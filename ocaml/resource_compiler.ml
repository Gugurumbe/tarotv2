#use "topfind";;

#require "unix";;

let file_to_process = ref ""

let output_file = ref ""

let lines_per_item = ref 12

let version = "1.0"

let rec mkdir path =
  let dirname = Filename.dirname path in
  let () =
    if not (Sys.file_exists dirname)
    then mkdir dirname in
  Unix.mkdir path 0o755

let main () =
  let ml_header =
    Printf.sprintf
      "(* %s generated by tarotv-resource-compiler version %s from %s. *)\n\
       (* DO NOT EDIT *)\n\
       let items = [|\n  "
      (Filename.basename !output_file) version
      !file_to_process in
  let ml_footer =
    Printf.sprintf "|]\n" in
  let () = if not (Sys.file_exists (Filename.dirname !output_file))
    then mkdir (Filename.dirname !output_file)
  in
  let i = open_in !file_to_process in
  let o = open_out !output_file in
  let () = output o ml_header 0 (Bytes.length ml_header) in
  let get_item () =
    let tab = Array.init !lines_per_item (fun _ -> input_line i) in
    Array.to_list tab
  in
  let embed_in_ocaml list =
    let escaped = List.map (Printf.sprintf "%S") list in
    let seq = Bytes.concat ";\n    " escaped in
    let seq = "[\n    "^seq^"];\n  " in
    let () = output o seq 0 (Bytes.length seq) in
    ()
  in
  let cancel () =
    let () = close_out o in
    let () = Sys.remove !output_file in
    exit 1
  in
  let rec work () =
    try
      let () = embed_in_ocaml (get_item ()) in
      work ()
    with
    | End_of_file ->
      let () = output o ml_footer 0 (Bytes.length ml_footer) in
      let () = close_out o in
      let () = close_in i in
      ()
    | exn ->
      let () = Printf.eprintf "Error : %s.\n%!" (Printexc.to_string exn) in
      cancel ()
  in
  work ()

let speclist = [("-lines", Arg.Set_int lines_per_item, "Set the number of lines belonging to each object. Default : 12.");
                ("-o", Arg.Set_string output_file, "Set the output filename.")]

let usage_message =
  Printf.sprintf "Compile the cards of the tarotv game into a .ml file. \n\
                  To retrieve the data, use the \"items\" array containing \
                  the items. Each item is composed of fixed-length lines \
                  without the leading '\\n'.\n\
                  Usage: %s -o <destination.ml> [-lines 12] FILE\n"
    Sys.argv.(0)

let anon_fun truc =
  if !file_to_process = "" then file_to_process := truc
  else let () = Printf.eprintf "Don't know what to do with %S. Aborting."
           truc in
    exit 2

let () = Arg.parse speclist anon_fun usage_message

let () = if !file_to_process = "" then
    let () = Printf.eprintf "No input file given. See --help.\n%!" in
    exit 3

let () = if !output_file = "" then
    let () = Printf.eprintf "No output file given. See --help.\n%!" in
    exit 4

let () = main ()
